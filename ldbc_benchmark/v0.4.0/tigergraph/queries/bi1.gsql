CREATE DISTRIBUTED QUERY bi1(DATETIME date) FOR GRAPH ldbc_snb SYNTAX v2 {

  TYPEDEF TUPLE <INT year, BOOL isComment, INT lengthCategory, INT messageCount,
    INT averageMessageLength, INT sumMessageLength, FLOAT percentageOfMessages> RESULT;

  HeapAccum<RESULT>(0, year DESC, isComment ASC, lengthCategory ASC) @@result;
  GroupByAccum<INT year, BOOL isComment, INT lengthCategory,
    SumAccum<INT> messageCount, SumAccum<INT> sumMessageLength> @@midResult;

  OrAccum @isComment;
  SumAccum<INT> @lengthCategory;

  UINT total;

  messages =
    SELECT m
    FROM (Comment|Post):m
    WHERE m.creationDate < date
    ACCUM
      m.@isComment = (m.type == "Comment"),
      IF m.length < 40 THEN
        m.@lengthCategory = 0
      ELSE IF m.length < 80 THEN
        m.@lengthCategory = 1
      ELSE IF m.length < 160 THEN
        m.@lengthCategory = 2
      ELSE
        m.@lengthCategory = 3
      END
    POST-ACCUM @@midResult += (year(m.creationDate), m.@isComment, m.@lengthCategory -> 1, m.length);

  total = messages.size();
  @@result.resize(@@midResult.size());
  FOREACH m IN @@midResult DO
    @@result += RESULT(m.year, m.isComment, m.lengthCategory, m.messageCount,
      (m.sumMessageLength / m.messageCount), m.sumMessageLength, (m.messageCount * 1.0 / total));
  END;

  PRINT @@result;

  /*
  # This doesn't work for following reasons.
  # The case expression is not supported.
  # SEM-523: undefined variable year.
  # SEM-1621: 'COUNT(m) / totalMessageCount' is counted as non-aggregation term.
  # SEM-2416: ORDER BY and LIMIT must be used together.

  UINT totalMessageCount;

  # SEM-1621: COUNT(m) by itself doesn't work because a non-aggregation term is required.
  messages = SELECT m FROM (Comment|Post):m WHERE m.creationDate < date;
  totalMessageCount = messages.size();

  SELECT
    year(m.creationDate) AS year,
    m.type == "Comment" AS isComment,
    CASE
      WHEN m.length < 40 THEN 0
      WHEN m.length < 80 THEN 1
      WHEN m.length < 160 THEN 2
      ELSE 3
    END AS lengthCategory,
    COUNT(m) AS messageCount,
    AVG(m.length) AS averageMessageLength,
    SUM(m.length) AS sumMessageLength,
    COUNT(m) / totalMessageCount AS percentageOfMessages
  INTO T
  FROM (Comment|Post):m
  WHERE m.creationDate < date
  GROUP BY year, isComment, lengthCategory
  ORDER BY year DESC, isComment ASC, lengthCategory ASC;

  PRINT T;
  */
}
