# This query provides the exact solution 
USE GRAPH ldbc_snb
SET syntax_version = "v2"
# DISTRIBUTED QUERY NOT SUPPORTED
CREATE OR REPLACE DISTRIBUTED QUERY bi19(VERTEX<City> city1Id, VERTEX<City> city2Id) FOR GRAPH ldbc_snb SYNTAX v2 {
  TYPEDEF TUPLE <UINT person1Id, UINT person2Id, DOUBLE totalWeight> RESULT;
  HeapAccum<RESULT>(20, totalWeight ASC, person1Id ASC, person2Id ASC) @@result;
  #GroupByAccum<UINT p1, UINT p2, SumAccum<UINT> number> @@interactions;
  MapAccum<VERTEX<Person>, SumAccum<UINT>> @replyToCount;
  GroupByAccum<UINT p1, UINT p2, MinAccum<DOUBLE> dist> @@paths;
  MapAccum<UINT, MinAccum<DOUBLE>> @dist1;  
  MinAccum<VERTEX<Person>> @creator, @replyto; 
  OrAccum @next1, @isTarget, @selected, @next;
  DOUBLE threshold;
  P = {Person.*};
  threshold = P.size();

  city1 = {city1Id};
  city2 = {city2Id};
  S = SELECT p FROM city1:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@dist1 += (p.id->0), p.@selected += true;
  S2 = SELECT p FROM city2:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@isTarget += True;
  Sm = SELECT m 
    FROM S:s -(<HAS_CREATOR)- (Comment|Post):m 
    ACCUM m.@creator += s, m.@selected += TRUE;  
  Sm = SELECT m1 FROM Sm:m1 -(REPLY_OF>)- (Comment|Post):m2 
      WHERE m2.@selected
      ACCUM m1.@replyto += m2.@creator;
  tmp = SELECT s FROM Sm:m -(HAS_CREATOR>)- Person:s  
    ACCUM s.@replyToCount += (m.@replyto -> 1);

  WHILE S.size()>0 DO
    Next = SELECT t FROM S:s-(KNOWS)-Person:t 
      WHERE NOT t.@selected
      ACCUM t.@selected += true;
    # Compute the edge weight
    Nm = SELECT m FROM Next:s -(<HAS_CREATOR)- (Comment|Post):m
      ACCUM m.@creator += s, m.@next += TRUE;
    R1 = SELECT m1 FROM Nm:m1 -(REPLY_OF>)- (Comment|Post):m2 
      WHERE m2.@selected OR m2.@next
      ACCUM m1.@replyto += m2.@creator;
    R2 = SELECT m1 FROM Nm:m2 -(<REPLY_OF)- (Comment|Post):m1 
      WHERE m1.@selected
      ACCUM m1.@replyto += m2.@creator;
    Nm = SELECT m FROM Nm:m ACCUM m.@next = false, m.@selected = true;

    Reply = R1 UNION R2;
    tmp = SELECT s FROM Reply:m -(HAS_CREATOR>)- Person:s 
      ACCUM s.@replyToCount += (m.@replyto -> 1);
    
    # Expand the know map, we also neglect the distances larger than threshold
    S = SELECT t FROM S:s-(KNOWS)-Person:t 
      WHERE s.@replyToCount.get(t) + t.@replyToCount.get(s)>0
      ACCUM
        DOUBLE edgeWeight = 1.0 / (s.@replyToCount.get(t) + t.@replyToCount.get(s)),
        FOREACH (p,dis) IN s.@dist1 DO
          DOUBLE t_dis = dis + edgeWeight, 
          IF t_dis < threshold AND t_dis < t.@dist1.get(p) THEN
            t.@dist1 += (p -> t_dis),
            t.@next1 += true, 
            IF t.@isTarget THEN
              @@paths += (p, t.id->t_dis)
            END 
          END
        END
      HAVING t.@next1;
    S = SELECT s FROM S:s ACCUM s.@next1 = false;

    # Update the threshold
    IF S.size()>0 AND @@paths.size() >= 20 THEN
      @@result.clear();
      FOREACH (p1,p2,dist) IN @@paths DO
        @@result += RESULT(p1,p2,dist);
      END;
      FOREACH i IN RANGE[0, 19] DO
        threshold = @@result.pop().totalWeight;
      END; 
    END;
    PRINT S.size();
  END; # WHILE (S1.size()>0 OR S2.size()>0)
  FOREACH (p1,p2,dist) IN @@paths DO
    @@result += RESULT(p1,p2,dist);
  END;
  PRINT @@result;
}

#INSTALL QUERY bi19
#RUN QUERY bi19(669, 648)


/*
# This query is not distributed
# takes 4min40 for SF 100
USE GRAPH ldbc_snb
SET syntax_version = "v2"
# DISTRIBUTED QUERY NOT SUPPORTED
CREATE OR REPLACE QUERY bi19(VERTEX<City> city1Id, VERTEX<City> city2Id) FOR GRAPH ldbc_snb SYNTAX v2 {
  TYPEDEF TUPLE <UINT person1Id, UINT person2Id, DOUBLE totalWeight> RESULT;
  HeapAccum<RESULT>(20, totalWeight ASC, person1Id ASC, person2Id ASC) @@result;
  #GroupByAccum<UINT p1, UINT p2, SumAccum<UINT> number> @@interactions;
  MapAccum<UINT, MapAccum<UINT, SumAccum<UINT>>> @@interactions;
  GroupByAccum<UINT p1, UINT p2, MinAccum<DOUBLE> dist> @@paths;
  MapAccum<UINT, MinAccum<DOUBLE>> @dist1;  
  SumAccum<UINT> @creatorId; 
  OrAccum @next1, @isTarget;
  DOUBLE threshold;
  threshold = 10; # Max path length is 10

  city1 = {city1Id};
  city2 = {city2Id};
  S = SELECT p FROM city1:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@dist1 += (p.id->0);
  S2 = SELECT p FROM city2:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@isTarget += True;
  Sm = SELECT m FROM S:s -(<HAS_CREATOR)- (Comment|Post):m ACCUM m.@creatorId += s.id;  
  tmp = SELECT m1 FROM Sm:m1 -(<REPLY_OF|REPLY_OF>)- (Comment|Post):m2 
      WHERE m2.@creatorId>0
      ACCUM @@interactions += (m1.@creatorId -> (m2.@creatorId -> 1));  
        
  WHILE S.size()>0 DO
    Next = SELECT t FROM S:s-(KNOWS)-Person:t WHERE t.@dist1.size() == 0;
    # Compute the weight
    Nm = SELECT m FROM Next:s -(<HAS_CREATOR)- (Comment|Post):m ACCUM m.@creatorId += s.id;
    tmp = SELECT m2 FROM Nm:m2 -(<REPLY_OF|REPLY_OF>)- (Comment|Post):m1 
      WHERE m1.@creatorId>0
      ACCUM @@interactions += (m1.@creatorId -> (m2.@creatorId -> 1));  
    
    # Expand the know map, we also neglect the distances larger than threshold
    S = SELECT t FROM S:s-(KNOWS)-Person:t 
      WHERE @@interactions.get(s.id).get(t.id)>0
      ACCUM
        DOUBLE edgeWeight = 1.0 / @@interactions.get(s.id).get(t.id),
        FOREACH (p,dis) IN s.@dist1 DO
          DOUBLE t_dis = dis + edgeWeight, 
          IF t_dis < threshold AND t_dis < t.@dist1.get(p) THEN
            t.@dist1 += (p -> t_dis),
            t.@next1 += true, 
            IF t.@isTarget THEN
              @@paths += (p, t.id->t_dis)
            END 
          END
        END
      HAVING t.@next1;
    S = SELECT s FROM S:s ACCUM s.@next1 = false;

    # Update the threshold
    IF S.size()>0 AND @@paths.size() >= 20 THEN
      @@result.clear();
      FOREACH (p1,p2,dist) IN @@paths DO
        @@result += RESULT(p1,p2,dist);
      END;
      FOREACH i IN RANGE[0, 19] DO
        threshold = @@result.pop().totalWeight;
      END; 
    END;
    PRINT S.size();
  END; # WHILE (S1.size()>0 OR S2.size()>0)
  FOREACH (p1,p2,dist) IN @@paths DO
    @@result += RESULT(p1,p2,dist);
  END;
  PRINT @@result;
}
*/