USE GRAPH ldbc_snb
SET syntax_version = "v2"
CREATE OR REPLACE DISTRIBUTED QUERY bi14(STRING country1, STRING country2) {
TYPEDEF TUPLE<INT person1Id, INT person2Id, STRING city1Name, INT score> pairScore;
  MapAccum<STRING, 
      GroupByAccum<INT person1Id, INT person2Id, OrAccum<bool> b1, OrAccum<bool> b2, 
          OrAccum<bool> b3, OrAccum<bool> b4, OrAccum<bool> b5>> @@pairScoreMap;
  SumAccum<INT> @@score;
  SumAccum<STRING> @city;
  OrAccum @valid;
  SetAccum<VERTEX<Person>> @@P2Set;
  SumAccum<INT> @pid1, @pid2;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@pairScoreGroupTop;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@result;
  
  // identify person1 and person2
  P2 = 
    SELECT p
    FROM Country:s -(<IS_PART_OF.<IS_LOCATED_IN)-Person:p
    WHERE s.name == country2
    ACCUM p.@valid+=True, @@P2Set += p;
  P1 = 
    SELECT p
    FROM Country:s -(<IS_PART_OF)- City:c -(<IS_LOCATED_IN)-Person:p
    WHERE s.name == country1
    PER(c,p)
    ACCUM p.@city = c.name
    POST-ACCUM 
      FOREACH p2 in @@P2Set DO 
        @@pairScoreMap += (p.@city -> (p.id, p2.id -> False, False, False, False, False))
      END;
  
  C1 = SELECT m FROM P1:p -(<HAS_CREATOR)- Comment:m;
  #C2 = SELECT m FROM P2:p -(<HAS_CREATOR)- Comment:m;
  M1 = 
    SELECT m FROM P1:p -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@pid1 = p.id, m.@city = p.@city;
  M2 = 
    SELECT m FROM P2:p -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@pid2 = p.id;
  
  acc1 =
    SELECT m2
    FROM C1:c1 -(REPLY_OF>)- (Comment|Post):m2
    WHERE m2.@pid2>0
    ACCUM @@pairScoreMap += (c1.@city -> (c1.@pid1, m2.@pid2 -> True, False, False, False, False));
  
  acc2 =
    SELECT c2
    FROM M1:m1 -(<REPLY_OF)- Comment:c2
    WHERE c2.@pid2>0
    ACCUM @@pairScoreMap += (m1.@city -> (m1.@pid1, c2.@pid2 -> False, True, False, False, False));

  acc3 =
    SELECT p2
    FROM P1:p1 -(KNOWS)- Person:p2
    WHERE p2.@valid
    ACCUM @@pairScoreMap += (p1.@city -> (p1.id, p2.id -> False, False, True, False, False));

  acc4 =
    SELECT m2
    FROM P1:p1 -(LIKES>)- (Comment|Post):m2
    WHERE m2.@pid2>0
    ACCUM @@pairScoreMap += (p1.@city -> (p1.id, m2.@pid2 -> False, False, False, True, False));

  acc5 =
    SELECT p2
    FROM M1:m1 -(<LIKES)- Person:p2
    WHERE p2.@valid
    ACCUM @@pairScoreMap += (m1.@city -> (m1.@pid1, p2.id -> False, False, False, False, True));

  @@result.resize(@@pairScoreMap.size());
  FOREACH (city,gba) IN @@pairScoreMap DO
    @@pairScoreGroupTop.clear();
    FOREACH (p1,p2,b1,b2,b3,b4,b5) IN gba DO
      @@score = 0;
      IF b1 THEN @@score += 4; END;
      IF b2 THEN @@score += 1; END;
      IF b3 THEN @@score += 15; END;
      IF b4 THEN @@score += 10; END;
      IF b5 THEN @@score += 1; END;
      @@pairScoreGroupTop += pairScore(p1, p2, city, @@score);
    END;
    @@result += @@pairScoreGroupTop.top();
  END;

  PRINT @@result;
}

//INSTALL QUERY bi14
//RUN QUERY bi14("China", "Austria")