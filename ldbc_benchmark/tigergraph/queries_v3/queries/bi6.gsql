USE GRAPH ldbc_snb
SET syntax_version = "v2"
CREATE OR REPLACE DISTRIBUTED QUERY bi6(STRING tag) {
  TYPEDEF TUPLE <UINT personId, UINT authorityScore> RESULT;
  HeapAccum<RESULT>(100, authorityScore DESC, personId ASC) @@result;
  MapAccum<VERTEX<Person>, UINT> @@popularityScore;
  SumAccum<UINT> @authorityScore;
  SumAccum<UINT> @score;
  SetAccum<VERTEX<Person>> @liked;
  T = {Tag.*};
  T = SELECT t FROM T:t WHERE t.name == tag;
  message1 = SELECT m FROM T -(<HAS_TAG)- (Comment|Post):m;
  person2 = SELECT p2 FROM message1 -(<LIKES)- Person:p2; 
  person2 = SELECT p2 FROM person2:p2 -(<HAS_CREATOR)- _:m
    ACCUM p2.@score += m.outdegree("LIKES_REVERSE")
    POST-ACCUM @@popularityScore += (p2 -> p2.@score);  
  tmp = SELECT m 
    FROM message1:m -(<LIKES)- Person:p2 
    ACCUM m.@liked += p2;
    
  person1 =
    SELECT p1
    FROM message1:m -(HAS_CREATOR>)- Person:p1
    ACCUM p1.@liked += m.@liked
    POST-ACCUM 
      FOREACH p IN p1.@liked DO
        p1.@authorityScore += @@popularityScore.get(p)
      END, 
      @@result += RESULT(p1.id, p1.@authorityScore);
  
  PRINT @@result;
}

#INTERPRET QUERY bi6("Augustine_of_Hippo")