USE GRAPH ldbc_snb
SET syntax_version = "v2"

# DISTRIBUTED QUERY NOT SUPPORTED
CREATE OR REPLACE /*DISTRIBUTED*/ QUERY bi15(VERTEX<Person> person1Id, VERTEX<Person> person2Id, DATETIME startDate, DATETIME endDate) {

  TYPEDEF TUPLE <JSONARRAY personId, DOUBLE weight> RESULT;
  HeapAccum<RESULT>(0, weight DESC, personId ASC) @@result;
  OrAccum @@found, @@next=true;
  ListAccum<ListAccum<VERTEX<Person>>> @paths;
  ListAccum<ListAccum<VERTEX<Person>>> @@shortestPaths;
  OrAccum @visited1, @visited2;

  SetAccum<VERTEX<Person>> @@PersonInShortestPath;
  SumAccum<UINT> @creatorId;
  #bug in GroupAccum: semantic check error
  #GroupByAccum<UINT p1, UINT p2, SumAccum<DOUBLE> weight> @@KnowWeight; 
  MapAccum<UINT, MapAccum<UINT, SumAccum<DOUBLE>>> @@KnowWeight;
  STRING jsonStr;
  SumAccum<DOUBLE> @@weight;

  S1 = {person1Id};
  S2 = {person2Id};
  S1 = Select s FROM S1:s ACCUM s.@visited1 = TRUE, s.@paths += [s];
  S2 = Select s FROM S2:s ACCUM s.@visited2 = TRUE, s.@paths += [s];
  
  WHILE NOT @@found AND @@next DO
    @@next = false;
    S1 = 
      SELECT t
      FROM S1:s -(KNOWS)- Person:t
      WHERE NOT t.@visited1
      ACCUM 
        IF t.@visited2 THEN #found the shortest path
          @@found += TRUE,
          FOREACH p1 IN s.@paths DO
            FOREACH p2 IN t.@paths DO
              @@shortestPaths += p1 + p2
            END
          END
        ELSE #not found
          @@next += true,
          t.@visited1 += TRUE,
          FOREACH p IN s.@paths DO
            t.@paths += p + [t]
          END
        END;
    
    IF @@found OR NOT @@next THEN
      BREAK;
    END;
    @@next = false;
    S2 =   
      SELECT t
      FROM S2:s -(KNOWS)- Person:t
      WHERE NOT t.@visited2
      ACCUM 
        IF t.@visited1 THEN #found the shortest path
          @@found += TRUE,
          FOREACH p1 IN s.@paths DO
            FOREACH p2 IN t.@paths DO
              @@shortestPaths += p2 + p1
            END
          END
        ELSE #not found
          @@next += true,
          t.@visited2 += TRUE,
          FOREACH p IN s.@paths DO
            t.@paths += [t] + p 
          END
        END;
  END;
  #PRINT @@shortestPaths;
  
  
  #Calculate weight for each path
  FOREACH path IN @@shortestPaths DO
    FOREACH p in path DO
      @@PersonInShortestPath += p;
    END;
  END;

  persons = {@@PersonInShortestPath};
  comments = SELECT m FROM persons:p -(<HAS_CREATOR)- Comment:m ACCUM m.@creatorId = p.id;
  commentsInForum = SELECT m 
    FROM comments:m -(REPLY_OF>*)- Post -(<CONTAINER_OF)- Forum:f 
    WHERE f.creationDate BETWEEN startDate AND endDate;
  postsInForum = SELECT p 
    FROM persons:c -(<HAS_CREATOR)- Post:p -(<CONTAINER_OF)- Forum:f 
    WHERE f.creationDate BETWEEN startDate AND endDate
    ACCUM p.@creatorId = c.id;
  tmp = SELECT m2
    FROM comments:m1 -(REPLY_OF>)- postsInForum:m2
    ACCUM @@KnowWeight += (m1.@creatorId-> (m2.@creatorId ->1.0));
  tmp = SELECT m2
    FROM comments:m1 -(REPLY_OF>)- commentsInForum:m2
    ACCUM @@KnowWeight += (m1.@creatorId-> (m2.@creatorId ->0.5));
  
  @@result.resize(@@shortestPaths.size());
  FOREACH path IN @@shortestPaths DO
    @@weight = 0.0;
    jsonStr = "[";
    FOREACH i in range[0,path.size()-2] DO 
       jsonStr = jsonStr + bigint_to_string(path.get(i).id) + ",";
       @@weight += @@KnowWeight.get(path.get(i).id).get(path.get(i+1).id)
        + @@KnowWeight.get(path.get(i+1).id).get(path.get(i).id);
    END;
    jsonStr = jsonStr + bigint_to_string(path.get(path.size()-1).id) + "]";
    @@result += RESULT(parse_json_array(jsonStr), @@weight);
  END;
  PRINT @@result; 
}
#INSTALL QUERY bi15
#RUN QUERY bi15(2199023259725,24189255821493,"2011-07-22T00:00:00","2012-07-31T00:00:00")