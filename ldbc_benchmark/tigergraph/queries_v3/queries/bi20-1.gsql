/*
At the first glance, this query is a simplified version of BI 9. 
This workload calculate the shortest weighted path between a vertex set to a single vertex.
Actually, this shortest weighted path is also the shortest path !!!!!!!!

Proof: 
The weight of path of A-(KONWS)-B is always smaller than A-(KONWS)-C-(KONWS)-B. 
This is because 
  abs(A.classYear - B.classYear) + 1 < abs(A.classYear - C.classYear) +  abs(C.classYear - B.classYear) + 2
Thus, the shortest weighted path is also the shortest path
*/
USE GRAPH ldbc_snb
SET syntax_version = "v2"
CREATE OR REPLACE DISTRIBUTED QUERY bi20(STRING company, VERTEX<Person> person2Id) {
  TYPEDEF TUPLE<UINT totalWeight, UINT person1Id> RESULT;
  HeapAccum<RESULT>(20, totalWeight ASC, person1Id ASC) @@result;
  SumAccum<UINT> @person1Id; 
  OrAccum @visited2;
  SetAccum<VERTEX<University>> @univ;
  MapAccum<VERTEX<University>, UINT> @year;
  MinAccum<UINT> @dist1, @dist2; 
  MapAccum<UINT, MinAccum<UINT>> @@paths;
  OrAccum @@next1, @@next2;
  UINT threshold;
  threshold = 100;
  S1 =
    SELECT p
    FROM Company:c -(<WORK_AT)- Person:p
    WHERE c.name == company AND p != person2Id
    ACCUM p.@person1Id = p.id, p.@dist1 = 0;
  
  S2 = {person2Id};
  S2 = SELECT s FROM S2:s ACCUM s.@visited2 += true, s.@dist2 = 0; 
  S = S1 UNION S2;
  tmp = Select s
    FROM S:s -(STUDY_AT>:e)- University:u
    ACCUM s.@univ += u, s.@year += (u->e.classYear);
  @@next1 = true; @@next2 = true;
  WHILE @@next1 AND @@next2 DO
    Next = SELECT t FROM S:s-(KNOWS)-Person:t WHERE t.@person1Id==0 AND NOT t.@visited2;
    tmp = Select s
      FROM Next:s -(STUDY_AT>:e)- University:u
      ACCUM s.@univ += u, s.@year += (u->e.classYear);
    
    S = SELECT t FROM S:s-(KNOWS)-Person:t 
      WHERE (t.@person1Id == 0 OR NOT t.@visited2) AND t.@univ.size()>0
      ACCUM
        FOREACH u IN (s.@univ INTERSECT t.@univ) DO
          DOUBLE weight = abs(s.@year.get(u) - t.@year.get(u)) + 1,
          IF s.@person1Id > 0 AND t.@person1Id==0 AND s.@dist1 + weight < threshold THEN  
            t.@person1Id += s.@person1Id,
            t.@dist1 += s.@dist1 + weight
          END,
          IF s.@visited2 AND NOT t.@visited2 AND s.@dist2 + weight < threshold THEN
            t.@visited2 += true,
            t.@dist2 += s.@dist2 + weight
          END
        END 
      POST-ACCUM
        IF t.@person1Id>0 AND t.@visited2 THEN
          @@paths += (t.@person1Id -> t.@dist1 + t.@dist2)
        END
      HAVING (t.@person1Id>0 AND NOT t.@visited2) OR (t.@person1Id==0 AND t.@visited2); 
    # Because the shortest weighted paths must be the shortest path
    IF @@paths.size() > 0 THEN 
      BREAK;
    END;
    @@next1 = false; @@next2 = false;
    S = SELECT s FROM S:s ACCUM 
      IF s.@person1Id > 0 THEN @@next1 += true END,
      IF s.@visited2 THEN @@next2 += true END;
  END; # WHILE 
  FOREACH (p,dist) IN @@paths DO
    @@result += RESULT(p,dist);
  END;
  PRINT @@result;
}

#INSTALL QUERY bi20
#RUN QUERY bi20("Pamir_Airways", 15393162792760)