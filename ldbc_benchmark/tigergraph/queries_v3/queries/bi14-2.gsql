USE GRAPH ldbc_snb
SET syntax_version = "v2"
CREATE OR REPLACE DISTRIBUTED QUERY bi14(STRING country1, STRING country2) {
TYPEDEF TUPLE<UINT person1Id, UINT person2Id, STRING city1Name, INT score> pairScore;
  MapAccum<VERTEX<City>, GroupByAccum<UINT person1Id, UINT person2Id, BitwiseOrAccum bits>> @@pairScoreMap;
  MinAccum<VERTEX<City>> @city;
  SetAccum<VERTEX<City>> @@CityNonzeroScore;
  OrAccum @valid;
  SumAccum<UINT> @pid1, @pid2;
  MinAccum<UINT> @min_pid1, @@min_pid2;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@pairScoreGroupTop;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@result;
  UINT score;
  // select city1, person1 and person2
  City1 = SELECT c FROM Country:s -(<IS_PART_OF)- City:c  
    WHERE s.name == country1;
  P1 = SELECT p FROM City1:c -(<IS_LOCATED_IN)-Person:p 
    ACCUM p.@city = c;
  P2 = 
    SELECT p
    FROM Country:s -(<IS_PART_OF.<IS_LOCATED_IN)-Person:p
    WHERE s.name == country2
    ACCUM p.@valid+=True;
  // Calculate score
  C1 = SELECT m FROM P1:p -(<HAS_CREATOR)- Comment:m;
  M1 = 
    SELECT m FROM P1:p -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@pid1 = p.id, m.@city = p.@city;
  M2 = 
    SELECT m FROM P2:p -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@pid2 = p.id;
  
  acc1 =
    SELECT m2
    FROM C1:c1 -(REPLY_OF>)- (Comment|Post):m2
    WHERE m2.@pid2>0
    ACCUM @@pairScoreMap += (c1.@city -> (c1.@pid1, m2.@pid2 -> 16)); // 10000
  
  acc2 =
    SELECT c2
    FROM M1:m1 -(<REPLY_OF)- Comment:c2
    WHERE c2.@pid2>0
    ACCUM @@pairScoreMap += (m1.@city -> (m1.@pid1, c2.@pid2 -> 8)); //01000

  acc3 =
    SELECT p2
    FROM P1:p1 -(KNOWS)- Person:p2
    WHERE p2.@valid
    ACCUM @@pairScoreMap += (p1.@city -> (p1.id, p2.id -> 4)); //00100

  acc4 =
    SELECT m2
    FROM P1:p1 -(LIKES>)- (Comment|Post):m2
    WHERE m2.@pid2>0
    ACCUM @@pairScoreMap += (p1.@city -> (p1.id, m2.@pid2 -> 2)); //00010

  acc5 =
    SELECT p2
    FROM M1:m1 -(<LIKES)- Person:p2
    WHERE p2.@valid
    ACCUM @@pairScoreMap += (m1.@city -> (m1.@pid1, p2.id -> 1)); //00001

  @@result.resize(City1.size());
  FOREACH (city,gba) IN @@pairScoreMap DO
    @@CityNonzeroScore += city;
    @@pairScoreGroupTop.clear();
    FOREACH (p1,p2,b) IN gba DO
      score = (b&16)/16 * 4 + (b&8)/8 + (b&4)/4 * 15  + (b&2)/2 * 10  + (b&1);  
      @@pairScoreGroupTop += pairScore(p1, p2, city.name, score);
    END;
    @@result += @@pairScoreGroupTop.top();
  END;
  // add cities of zero scores (min pid1 in city1, min pid2, city name, 0)
  IF @@result.size() < City1.size() THEN
    P2p = SELECT p FROM P2:p ACCUM @@min_pid2 += p.id;
    nonzeroScoreCity = {@@CityNonzeroScore};
    zeroScoreCity = City1 MINUS nonzeroScoreCity;
    tmp = SELECT c 
      FROM zeroScoreCity:c -(<IS_LOCATED_IN)- Person:p
      ACCUM c.@min_pid1 += p.id
      POST-ACCUM 
        @@result += pairScore(c.@min_pid1, @@min_pid2, c.name, 0);
  END;
  PRINT @@result;
}

// INSTALL QUERY bi14
// RUN QUERY bi14("Brazil", "Argentina")