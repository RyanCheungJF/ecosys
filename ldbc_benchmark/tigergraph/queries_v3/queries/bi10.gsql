USE GRAPH ldbc_snb
SET syntax_version = "v2"

CREATE OR REPLACE DISTRIBUTED QUERY bi10(VERTEX<Person> personId, STRING country, STRING tagClass, UINT minPathDistance, UINT maxPathDistance) {

  SumAccum<UINT> @@pathLength;

  OrAccum @visited;

  countryWithName = SELECT c FROM Country:c WHERE c.name == country;
  candidates = SELECT p FROM countryWithName -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p;

  sources = {personId};
  targets (Person) = {};
  WHILE @@pathLength < minPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;
  END;
  WHILE @@pathLength < maxPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;

    targets = targets UNION sources;
  END;

  expertCandidatePersons = targets INTERSECT candidates;
  tagClassWithName = SELECT tc FROM TagClass:tc WHERE tc.name == tagClass;
  messages =
    SELECT m
    FROM expertCandidatePersons:p -(<HAS_CREATOR)- (Comment|Post):m -(HAS_TAG>.HAS_TYPE>)- tagClassWithName;

  SELECT
    p.id AS expertCandidatePersonId,
    t.name AS tagName,
    COUNT(m) AS messageCount
  INTO result
  FROM
    messages:m -(HAS_TAG>)- Tag:t,
    :m -(HAS_CREATOR>)- expertCandidatePersons:p
  ORDER BY messageCount DESC, tagName ASC, expertCandidatePersonId ASC
  LIMIT 100;

  PRINT result;
}
