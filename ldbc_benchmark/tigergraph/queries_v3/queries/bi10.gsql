USE GRAPH ldbc_snb
SET syntax_version = "v2"

CREATE OR REPLACE DISTRIBUTED QUERY bi10(VERTEX<Person> personId, STRING country, STRING tagClass, UINT minPathDistance, UINT maxPathDistance) {
  typedef tuple<uint pid, string tagName, int messageCount> result;
  HeapAccum<result>(100, messageCount desc, tagName asc, pid asc) @@result;

  SumAccum<UINT> @@pathLength;
  OrAccum @visited, @selected;
  MaxAccum<UINT> @creator;
  MapAccum<UINT, UINT> @creatorCount;
  
  countryWithName = SELECT c FROM Country:c WHERE c.name == country;
  candidates = SELECT p FROM countryWithName -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p;

  sources = {personId};
  targets (Person) = {};
  WHILE @@pathLength < minPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;
  END;
  WHILE @@pathLength < maxPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;

    targets = targets UNION sources;
  END;

  expertCandidatePersons = targets INTERSECT candidates;
  T = SELECT t FROM TagClass:tc-(<HAS_TYPE)-Tag:t WHERE tc.name == tagClass;
  messages = SELECT m FROM expertCandidatePersons:p -(<HAS_CREATOR)- (Comment|Post):m ACCUM m.@creator += p.id, m.@selected += true;
  T = SELECT t FROM T:t -(<HAS_TAG)- (Comment|Post):m 
    WHERE m.@selected 
    ACCUM t.@creatorCount += (m.@creator -> 1)
    POST-ACCUM FOREACH (pid, cnt) in t.@creatorCount DO
      @@result += result(pid, t.name, cnt)
    END;

  PRINT @@result AS result;
}
