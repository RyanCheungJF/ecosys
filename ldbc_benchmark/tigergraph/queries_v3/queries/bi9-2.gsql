USE GRAPH ldbc_snb
SET syntax_version = "v2"

CREATE OR REPLACE DISTRIBUTED QUERY bi9(DATETIME startDate, DATETIME endDate) {

  TYPEDEF TUPLE <UINT personId, STRING personFirstName, STRING personLastName, UINT threadCount, UINT messageCount> RESULT;

  HeapAccum<RESULT>(100, messageCount DESC, personId ASC) @@result;

  SumAccum<UINT> @messageCount;
  SumAccum<UINT> @threadCount;

  threads = SELECT p FROM Post:p WHERE p.creationDate BETWEEN startDate AND endDate;
  replies =
    SELECT c
    FROM threads:t -(<REPLY_OF*)- (Comment|Post):c
    WHERE c.creationDate BETWEEN startDate AND endDate
    ACCUM t.@messageCount += 1;

  tmp =
    SELECT p
    FROM threads:t -(HAS_CREATOR>)- Person:p
    ACCUM
      p.@threadCount += 1,
      p.@messageCount += t.@messageCount
    POST-ACCUM @@result += RESULT(p.id, p.firstName, p.lastName, p.@threadCount, p.@messageCount);

  PRINT @@result;

  /*
  # Below does not work in 3.1.0. Fixed in 3.1.1.
  SELECT
    p.id AS personId,
    p.firstName AS personFirstName,
    p.lastName AS personLastName,
    COUNT(t) AS threadCount,
    SUM(t.@messageCount) AS messageCount
  INTO result
  FROM threads:t -(HAS_CREATOR>)- Person:p
  # I assume explicitly stating group by p is better than implicit grouping by p's attributes.
  GROUP BY p
  ORDER BY messageCount DESC, personId ASC
  LIMIT 100;
  */
}
