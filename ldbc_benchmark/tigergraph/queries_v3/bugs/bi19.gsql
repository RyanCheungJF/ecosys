# https://github.com/tigergraph/gsql-graph-algorithms/blob/master/algorithms/schema-free/shortest_ss_pos_wt.gsql
# Finding shortest paths between pairs of Persons in Cities can be implemented in theory with an all-pairs shortest paths algorithm. 
# However, this needs to be executed on the whole Person-knows-Person graph and is prohibitively expensive. 
# better approach uses multiple single-source shortest path algorithms (e.g. from the City with fewer inhibitants).
# Current approach calculates the shortest path from both source and target, and expand from both source and target.

CREATE OR REPLACE DISTRIBUTED QUERY bi19(VERTEX<City> city1Id, VERTEX<City> city2Id) FOR GRAPH ldbc_snb SYNTAX v2 {
  TYPEDEF TUPLE <UINT person1Id, UINT person2Id, DOUBLE totalWeight> RESULT;
  HeapAccum<RESULT>(20, totalWeight DESC, person1Id ASC, person2Id ASC) @@result;
  #GroupByAccum<INT p1, INT p2, SumAccum<INT> number> @@interactions;
  MapAccum<VERTEX<Person>, SumAccum<UINT>> @interactions;
  MinAccum<DOUBLE> @dist1 = 10, @dist2 = 10;  # Max path length is 10
  SetAccum<VERTEX<Person>> @creatorId; 
  SumAccum<UINT> @sourceId, @targetId;
  DOUBLE threshhold;
  INT maxIter = 0, minDistance = 0;
  city1 = {city1Id};
  city2 = {city2Id};
  S1 = SELECT p FROM city1:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@dist1 = 0, p.@sourceId = p.id;
  T1 = SELECT p FROM city2:c -(<IS_LOCATED_IN)- Person:p ACCUM p.@dist2 = 0, p.@targetId = p.id;
  WHILE (S1.size()>0 OR T1.size()>0) DO
    # end the loop if no distance is smaller than threshold
    IF @@result.size() == 20 THEN
      threshhold = @@result.top().totalWeight;
    ELSE
      threshhold = 10;
    END;
    # expand from source
    S2 = SELECT s2 FROM S1:s1-(KNOWS)-Person:s2 WHERE s2.@sourceId == 0;
    SM1 = SELECT m1 FROM S1:s1 -(<HAS_CREATOR)- (Comment|Post):m1 ACCUM m1.@creatorId += s1; 
    SM2 = SELECT m2 FROM S2:s2 -(<HAS_CREATOR)- (Comment|Post):m2 ACCUM m2.@creatorId += s2;
    # there are bugs that preventing me to put these two SELECT together
    tmp = SELECT m1 
      FROM SM1:m1 -(<REPLY_OF|REPLY_OF>)- SM2:m2
      ACCUM FOREACH s1 IN m1.@creatorId DO
        FOREACH s2 IN m2.@creatorId DO
          s1.@interactions += (s2 -> 1)
        END
      END;  
    S2 = 
      SELECT s2 FROM S1:s1 -(KNOWS)- Person:s2 WHERE s2.@sourceId == 0
      ACCUM
        IF s1.@interactions.get(s2) > 0 THEN
          s2.@dist1 += s1.@dist1 + 1.0 / s1.@interactions.get(s2)
        END,
        s2.@sourceId = s1.@sourceId
      POST-ACCUM # s1.@dist1 and s2.@dist2 are shortest distance to source and target, respectively
        IF s2.@targetId > 0 THEN
          @@result += RESULT(s2.@sourceId, s2.@targetId, s2.@dist1 + s2.@dist2)
        END;
    
    # Replace S2 with S1 and remove the found person from S1 and T1
    S1 = SELECT s2 FROM S2:s2 WHERE s2.@targetId == 0 AND s2.@dist1 < threshhold;
    T1 = SELECT t1 FROM T1:t1 WHERE t1.@sourceId == 0;
    
    # expand from target
    T2 = SELECT t2 FROM T1:t1-(KNOWS)-Person:t2 WHERE t2.@targetId == 0;
    TM1 = SELECT m1 FROM T1:t1 -(<HAS_CREATOR)- (Comment|Post):m1 ACCUM m1.@creatorId += t1; 
    TM2 = SELECT m2 FROM T2:t2 -(<HAS_CREATOR)- (Comment|Post):m2 ACCUM m2.@creatorId += t2;
    # there are bugs that preventing me to put these two SELECT together
    tmp = SELECT m1 
      FROM TM1:m1 -(<REPLY_OF|REPLY_OF>)- TM2:m2
      ACCUM FOREACH t1 IN m1.@creatorId DO
        FOREACH t2 IN m2.@creatorId DO
          t1.@interactions += (t2 -> 1)
        END
      END;
    T2 = 
      SELECT t2 FROM T1:t1-(KNOWS)-Person:t2 WHERE t2.@targetId == 0
      ACCUM
        IF t1.@interactions.get(t2) > 0 THEN
          t2.@dist2 += t1.@dist2 + 1.0 / t1.@interactions.get(t2)
        END,
        t2.@targetId = t1.@targetId
      POST-ACCUM # t2.@dist1 and t2.@dist2 are shortest distance to source and target, respectively
        IF t2.@sourceId > 0 THEN
          @@result += RESULT(t2.@sourceId, t2.@targetId, t2.@dist1 + t2.@dist2)
        END;
    
    # Replace T2 with T1 and remove the found person from S1 and T1
    T1 = SELECT t2 FROM T2:t2 WHERE t2.@sourceId == 0 AND t2.@dist2 < threshhold;
    S1 = SELECT s1 FROM S1:s1 WHERE s1.@targetId == 0;
    
  END; # WHILE (S1.size()>0 OR S2.size()>0)
  PRINT @@result;
}
