CREATE OR REPLACE DISTRIBUTED QUERY bi14(STRING country1, STRING country2) FOR GRAPH ldbc_snb SYNTAX v2 {

  TYPEDEF TUPLE <UINT person1Id, UINT person2Id, STRING city1Name, UINT score> RESULT;

  HeapAccum<RESULT>(0, score DESC, person1Id ASC, person2Id ASC) @@result;
  MapAccum<STRING, GroupByAccum<UINT person1Id, UINT person2Id, SumAccum<UINT> score>> @@pairScores;
  HeapAccum<RESULT>(1, score DESC, person1Id ASC, person2Id ASC) @@topPairScores;
  SetAccum<VERTEX<Person>> @@person2Set;
  SumAccum<STRING> @city;

  countryWithName1 = SELECT c FROM Country:c WHERE c.name == country1;
  countryWithName2 = SELECT c FROM Country:c WHERE c.name == country2;

  person1s =
    SELECT p
    FROM countryWithName1 -(<IS_PART_OF)- City:c -(<IS_LOCATED_IN)- Person:p
    ACCUM p.@city = c.name;  

  person2s = SELECT p FROM countryWithName2 -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p
    ACCUM @@person2Set += p; 

  # case 1
  tmp =
    SELECT p2
    FROM person1s:p1 -(<HAS_CREATOR.REPLY_OF>.HAS_CREATOR>)- person2s:p2
    ACCUM @@pairScores += (p1.@city -> (p1.id, p2.id -> 4));

  # case 2
  tmp =
    SELECT p2
    FROM person1s:p1 -(<HAS_CREATOR.<REPLY_OF.HAS_CREATOR>)- person2s:p2
    ACCUM @@pairScores += (p1.@city -> (p1.id, p2.id -> 1));

  # case 3
  tmp =
    SELECT p2
    FROM person1s:p1 -(KNOWS)- person2s:p2
    ACCUM @@pairScores += (p1.@city -> (p1.id, p2.id -> 15));

  # case 4
  tmp =
    SELECT p2
    FROM person1s:p1 -(LIKES>.HAS_CREATOR>)- person2s:p2
    ACCUM @@pairScores += (p1.@city -> (p1.id, p2.id -> 10));

  # case 5
  tmp =
    SELECT p2
    FROM person1s:p1 -(<HAS_CREATOR.<LIKES)- person2s:p2
    ACCUM @@pairScores += (p1.@city -> (p1.id, p2.id -> 1));

  @@result.resize(@@pairScores.size());
  FOREACH (city, gba) IN @@pairScores DO
    @@topPairScores.clear();
    FOREACH (p1Id, p2Id, score) IN gba DO
      @@topPairScores += RESULT(p1Id, p2Id, city, score);
    END;
    @@result += @@topPairScores.top();
  END;

  PRINT @@result;
}
