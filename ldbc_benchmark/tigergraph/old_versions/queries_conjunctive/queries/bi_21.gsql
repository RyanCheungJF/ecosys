USE GRAPH ldbc_snb

CREATE QUERY bi_21(string cName, datetime endDate) FOR GRAPH ldbc_snb SYNTAX V2 {
  int secondsInMonth;
  SetAccum<vertex> @messageSet;
  SumAccum<int> @messageCount, @totalLikeCount, @zombieLikeCount;
  SumAccum<float> @zombieScore;
  SetAccum<edge> @totalLikeSet, @zombieLikeSet;

  P =
    SELECT p
    FROM Country:c -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p -(<HAS_CREATOR)- (Post|Comment):m
    WHERE c.name == cName AND p.creationDate < endDate AND m.creationDate < endDate
    ACCUM p.@messageSet += m
    POST-ACCUM p.@messageCount = p.@messageSet.size(), p.@messageSet.clear()
    HAVING p.@messageCount < (year(endDate) - year(p.creationDate)) * 12 + (month(endDate) - month(p.creationDate)) + 1;

  T =
    SELECT z
    FROM P:z -(<HAS_CREATOR)- (Post|Comment):m,
         Person:p -(LIKES>:lp)- :m,
         P:oz -(LIKES>:lz)- :m
    WHERE p.creationDate < endDate
    ACCUM z.@totalLikeSet += lp, z.@zombieLikeSet += lz
    POST-ACCUM
      z.@totalLikeCount = z.@totalLikeSet.size(), z.@totalLikeSet.clear(),
      z.@zombieLikeCount = z.@zombieLikeSet.size(), z.@zombieLikeSet.clear(),
      z.@zombieScore = 1.0 * z.@zombieLikeCount / z.@totalLikeCount;

  P = SELECT p FROM P:p ORDER BY p.@zombieScore DESC, p.id ASC LIMIT 100;
  PRINT P[P.id, P.@zombieLikeCount, P.@totalLikeCount, P.@zombieScore];
}
