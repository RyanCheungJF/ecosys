USE GRAPH ldbc_snb

CREATE QUERY ic_1(vertex<Person> pid, string firstName) FOR GRAPH ldbc_snb SYNTAX V2 {
  typedef tuple<string univName, int classYear, string cityName> univTuple;
  typedef tuple<string comName, int workFrom, string countryName> comTuple;
  SumAccum<uint> @distanceFromPerson;
  SumAccum<string> @friendCityName;
  SetAccum<univTuple> @friendUniversities;
  SetAccum<comTuple> @friendCompanies;
  SetAccum<vertex<Person>> @@friendSet;
  S = { pid };

  P =
    SELECT p
    FROM S:s -(KNOWS)- Person:p,
         :p -(IS_LOCATED_IN>)- City:ct1,
         :p -(WORK_AT>:ew)- Company:co -(IS_LOCATED_IN>)- Country:cn,
         :p -(STUDY_AT>:es)- University:u -(IS_LOCATED_IN>)- City:ct2
    WHERE p != pid AND p.firstName == firstName
    ACCUM p.@distanceFromPerson = 1,
          p.@friendCityName = ct1.name,
          p.@friendUniversities += univTuple(u.name, es.classYear, ct2.name),
          p.@friendCompanies += comTuple(co.name, ew.workFrom, cn.name)
    POST-ACCUM @@friendSet += p;

  P =
    SELECT p
    FROM S:s -(KNOWS*2)- Person:p,
         :p -(IS_LOCATED_IN>)- City:ct1,
         :p -(WORK_AT>:ew)- Company:co -(IS_LOCATED_IN>)- Country:cn,
         :p -(STUDY_AT>:es)- University:u -(IS_LOCATED_IN>)- City:ct2
    WHERE p != pid AND p.firstName == firstName AND (p NOT IN @@friendSet)
    ACCUM p.@distanceFromPerson = 2,
          p.@friendCityName = ct1.name,
          p.@friendUniversities += univTuple(u.name, es.classYear, ct2.name),
          p.@friendCompanies += comTuple(co.name, ew.workFrom, cn.name)
    POST-ACCUM @@friendSet += p;

  P =
    SELECT p
    FROM S:s -(KNOWS*3)- Person:p,
         :p -(IS_LOCATED_IN>)- City:ct1,
         :p -(WORK_AT>:ew)- Company:co -(IS_LOCATED_IN>)- Country:cn,
         :p -(STUDY_AT>:es)- University:u -(IS_LOCATED_IN>)- City:ct2
    WHERE p != pid AND p.firstName == firstName AND (p NOT IN @@friendSet)
    ACCUM p.@distanceFromPerson = 3,
          p.@friendCityName = ct1.name,
          p.@friendUniversities += univTuple(u.name, es.classYear, ct2.name),
          p.@friendCompanies += comTuple(co.name, ew.workFrom, cn.name)
    POST-ACCUM @@friendSet += p;

  S = { @@friendSet };
  S =
    SELECT s
    FROM S:s
    ORDER BY s.@distanceFromPerson ASC, s.lastName ASC, s.id ASC
    LIMIT 20;

  print S[
    S.id AS friendId,
    S.lastName AS friendLastName,
    S.@distanceFromPerson AS distanceFromPerson,
    S.birthday AS friendBirthday,
    S.creationDate AS friendCreationDate,
    S.gender AS friendGender,
    S.browserUsed AS friendBrowserUsed,
    S.locationIP AS friendLocationIp,
    S.email AS friendEmails,
    S.speaks AS friendLanguages,
    S.@friendCityName AS friendCityName,
    S.@friendUniversities AS friendUniversities,
    S.@friendCompanies AS friendCompanies
  ];
}
