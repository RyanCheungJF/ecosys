//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//IC 6 query description is on page 37 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY ic6
CREATE DISTRIBUTED QUERY ic6(VERTEX<Person> personId, STRING tagName) {
  TYPEDEF tuple<STRING tagName, INT postCount> tagStats;

  OrAccum @visited;
  ListAccum<VERTEX<Person>> @@friendAll;
  ListAccum<VERTEX<Post>> @@postAll;
  SumAccum<INT> @postCount;
  HeapAccum<tagStats>(10, postCount DESC, tagName ASC) @@tagStatsTop;

  INT i = 0;

  vPerson = { personId };
  WHILE i < 2 DO
    vPerson = 
      SELECT t
      FROM vPerson:s-(KNOWS)-Person:t
      WHERE t.@visited == False
      ACCUM 
        s.@visited += True,
        t.@visited += True,
        @@friendAll += t;

    i = i + 1;
  END;

  vFriend(Person) = { @@friendAll };
  vPost = 
    SELECT t
    FROM vFriend:s-(<HAS_CREATOR)-Post:t;

  vPost = 
    SELECT s
    FROM vPost:s-(HAS_TAG>)-Tag:t
    ACCUM CASE WHEN t.name == tagName THEN @@postAll += s END;

  vPost = { @@postAll };
  vTag = 
    SELECT t
    FROM vPost:s-(HAS_TAG>)-Tag:t
    ACCUM CASE WHEN t.name != tagName THEN t.@postCount += 1 END
    POST-ACCUM @@tagStatsTop += tagStats(t.name, t.@postCount);

  PRINT @@tagStatsTop;
}
