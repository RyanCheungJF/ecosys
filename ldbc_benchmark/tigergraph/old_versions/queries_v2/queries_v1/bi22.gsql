//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 22 query description is on page 80 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi22

CREATE DISTRIBUTED QUERY bi22(STRING country1Name, STRING country2Name) { 
  TYPEDEF TUPLE<INT person1Id, INT person2Id, STRING city1Name, INT score> pairScore;

  SumAccum<STRING> @city1Name;
  SumAccum<INT> @person1Id, @person2Id;
  OrAccum @valid = false;
  //SetAccum<INT> @@person2Ids;
  //MapAccum<INT, INT> @@messagePersonIds;
  MapAccum<STRING, 
      GroupByAccum<INT person1Id, INT person2Id, OrAccum<bool> b1, OrAccum<bool> b2, 
          OrAccum<bool> b3, OrAccum<bool> b4, OrAccum<bool> b5>> @@pairScoreMap;
  SumAccum<INT> @@score;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@pairScoreGroupTop;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @@pairScoreTop;

  // collect person1 and person2 into each set vPerson1 and vPerson2
  vCity1 = 
    SELECT t
    FROM Country:s-(<IS_PART_OF)-City:t
    WHERE s.name == country1Name;

  vPerson1 =
    SELECT t
    FROM vCity1:s-(<IS_LOCATED_IN)-Person:t
    ACCUM t.@city1Name = s.name;

  vCity2 = 
    SELECT t
    FROM Country:s-(<IS_PART_OF)-City:t
    WHERE s.name == country2Name;

  vPerson2 =
    SELECT t
    FROM vCity2:s-(<IS_LOCATED_IN)-Person:t
    POST-ACCUM t.@valid = true;
    //POST-ACCUM @@person2Ids += t.id;
  // case 1 and 4
  vMessage =
    SELECT t
    FROM vPerson2:s-(<HAS_CREATOR)-(Comment|Post):t
    ACCUM t.@person2Id = s.id;

  vComments1 = 
    SELECT t
    FROM vPerson1:s-(<HAS_CREATOR)-Comment:t
    ACCUM 
      t.@person1Id = s.id,
      t.@city1Name = s.@city1Name;

  tmp =
    SELECT t
    FROM vComments1:s-(REPLY_OF>)-(Comment|Post):t
    WHERE t.@person2Id > 0 
    ACCUM @@pairScoreMap += (s.@city1Name -> (s.@person1Id, t.@person2Id -> True, False, False, False, False));

  tmp =
    SELECT t
    FROM vPerson1:s-(LIKES>)-(Comment|Post):t
    WHERE t.@person2Id > 0
    ACCUM @@pairScoreMap += (s.@city1Name -> (s.id, t.@person2Id -> False, False, False, True, False));

  // case 2 and 5
  vMessage1 = 
    SELECT t
    FROM vPerson1:s-(<HAS_CREATOR)-(Comment|Post):t
    ACCUM 
      t.@person1Id = s.id,
      t.@city1Name = s.@city1Name;
      
  vComments =
    SELECT t
    FROM vPerson2:s-(<HAS_CREATOR)-Comment:t
    ACCUM t.@person2Id = s.id;
    
  vMessage =
    SELECT s
    FROM vMessage1:s-(<REPLY_OF)-Comment:t
    WHERE t.@person2Id > 0 
    ACCUM @@pairScoreMap += (s.@city1Name -> (s.@person1Id, t.@person2Id -> False, True, False, False, False));

  vMessage =
    SELECT s
    FROM vMessage1:s-(<LIKES)-Person:t
    WHERE t.@valid
    ACCUM @@pairScoreMap += (s.@city1Name -> (s.@person1Id, t.id -> False, False, False, False, True));
  // case 3
  vPerson1 =
    SELECT s
    FROM vPerson1:s-(KNOWS)-Person:t
    WHERE t.@valid
    ACCUM @@pairScoreMap += (s.@city1Name -> (s.id, t.id -> False, False, True, False, False));
  @@pairScoreTop.resize(@@pairScoreMap.size());
  FOREACH (k,gba) IN @@pairScoreMap DO
    @@pairScoreGroupTop.clear();
    FOREACH (p1,p2,b1,b2,b3,b4,b5) IN gba DO
      @@score = 0;
      IF b1 THEN @@score += 4; END;
      IF b2 THEN @@score += 1; END;
      IF b3 THEN @@score += 15; END;
      IF b4 THEN @@score += 10; END;
      IF b5 THEN @@score += 1; END;
      @@pairScoreGroupTop += pairScore(p1, p2, k, @@score);
    END;
    @@pairScoreTop += @@pairScoreGroupTop.top();
  END;

  PRINT @@pairScoreTop;
}
