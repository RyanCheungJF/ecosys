//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 20 query description is on page 78 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi20
CREATE DISTRIBUTED QUERY bi20(SET<STRING> tagClassNames) { 
  TYPEDEF TUPLE<STRING tagClassName, INT messageCount> INFO;

  HeapAccum<INFO>(200, messageCount DESC, tagClassName ASC) @@result;
  SetAccum<STRING> @tagClassNames;
  MapAccum<STRING, SumAccum<INT>> @@count;
	
  vTagClass = 
    SELECT s
    FROM TagClass:s
    WHERE s.name IN tagClassNames
    ACCUM s.@tagClassNames += s.name;

  vTags(ANY) = {};
  WHILE (vTagClass.size() > 0) DO
    tmp = 
      SELECT t 
      FROM vTagClass:s-(<HAS_TYPE)-Tag:t
      ACCUM t.@tagClassNames += s.@tagClassNames;

    vTags = vTags UNION tmp;

    vTagClass = 
      SELECT t 
      FROM vTagClass:s-(<IS_SUBCLASS_OF)-TagClass:t
      ACCUM t.@tagClassNames += s.@tagClassNames;
  END;

  vMessages = 
    SELECT t
    FROM vTags:s-(<HAS_TAG)-(Comment|Post):t
    ACCUM t.@tagClassNames += s.@tagClassNames
    POST-ACCUM
      FOREACH tn IN t.@tagClassNames DO
          @@count += (tn -> 1)
      END;

  FOREACH (key, value) IN @@count DO
    @@result += INFO(key, value);
  END;

  PRINT @@result; 	
}
