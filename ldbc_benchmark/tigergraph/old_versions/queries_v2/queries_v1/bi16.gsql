//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 16 query description is on page 74 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi16

CREATE DISTRIBUTED QUERY bi16(VERTEX<Person> personId, STRING countryName, STRING tagClassName, INT minPathDistance, INT maxPathDistance) {
  TYPEDEF tuple<INT personId, STRING tagName, INT messageCount> social;

  SumAccum<INT> @@counter = 1;
  SetAccum<INT> @visited;
  //SetAccum<VERTEX<Person>> @@personAll, @@personRange;
  OrAccum @valid = false;
  SetAccum<VERTEX<Person>> @@personRange;
  SumAccum<INT> @creatorId;
  SetAccum<VERTEX<Tag>> @@tagSel;
  OrAccum @isValid;
  SetAccum<STRING> @tagNames;
  GroupByAccum<INT personId, STRING tagName, SumAccum<INT> messageCount> @@socialGroup;
  HeapAccum<social>(100, messageCount DESC, tagName ASC, personId ASC) @@socialTop;

  vCity = 
    SELECT t
    FROM Country:s-(<IS_PART_OF)-City:t
    WHERE s.name == countryName;

  vPerson =
    SELECT t
    FROM vCity:s-(<IS_LOCATED_IN)-Person:t
    POST-ACCUM t.@valid = true;
    
  vPerson = { personId };
  WHILE @@counter <= maxPathDistance DO
    vPerson =
      SELECT t
      FROM vPerson:s-(KNOWS)-Person:t
      WHERE NOT t.@visited.contains(s.id) AND NOT s.@visited.contains(t.id)
      ACCUM 
        t.@visited += s.id,
        //CASE WHEN @@counter >= minPathDistance AND @@personAll.contains(t) THEN 
        CASE WHEN @@counter >= minPathDistance AND t.@valid == true THEN
          @@personRange += t
        END;

    @@counter += 1;
  END;

  vPerson = { @@personRange };
  vMessage =
    SELECT t
    FROM vPerson:s-(<HAS_CREATOR)-(Comment|Post):t
    ACCUM t.@creatorId += s.id;

  vTagClass = { TagClass.* };
  vTag =
    SELECT t
    FROM TagClass:s-(<HAS_TYPE)-Tag:t
    WHERE s.name == tagClassName
    ACCUM @@tagSel += t;

  vMessage =
    SELECT s
    FROM vMessage:s-(HAS_TAG>)-Tag:t
    ACCUM 
      s.@tagNames += t.name,
      CASE WHEN @@tagSel.contains(t) THEN s.@isValid += True END
    POST-ACCUM
      CASE WHEN s.@isValid THEN
        FOREACH tn IN s.@tagNames DO
          @@socialGroup += (s.@creatorId, tn -> 1)
        END
      END;

  FOREACH (p,t,m) IN @@socialGroup DO
    @@socialTop += social(p, t, m);
  END;

  PRINT @@socialTop;
}
