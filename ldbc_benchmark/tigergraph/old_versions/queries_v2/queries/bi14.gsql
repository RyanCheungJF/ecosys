//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 14 query description is on page 72 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi14
CREATE DISTRIBUTED QUERY bi14(datetime startDate, datetime endDate) {
  TYPEDEF TUPLE<INT personId, STRING personFirstName, STRING personLastName, INT threadCount, INT messageCount> initiator;
  SumAccum<INT> @messageCount, @threadCount, @personId;
  MapAccum<INT, INT> @@initiatorGroup;
  HeapAccum<initiator>(100, messageCount DESC, personId ASC) @@initiatorTop;

  vPost = SELECT p FROM Post:p WHERE p.creationDate BETWEEN startDate AND endDate;
  vPerson = 
    SELECT t
    FROM vPost:s-(HAS_CREATOR>)-Person:t
    ACCUM
      t.@threadCount += 1,
      s.@personId = t.id,
      @@initiatorGroup += (t.id -> 1);
  
  vMessage(Comment|Post) = vPost;
  WHILE vMessage.size() > 0 DO
    vMessage =
      SELECT t
      FROM vMessage:s-(<REPLY_OF)-Comment:t
      ACCUM
        t.@personId = s.@personId,
        CASE WHEN t.creationDate BETWEEN startDate AND endDate THEN
            @@initiatorGroup += (s.@personId -> 1)
        END;
  END;

  vPerson =
    SELECT v
    FROM vPerson:v
    ACCUM @@initiatorTop += initiator(v.id, v.firstName, v.lastName, v.@threadCount, @@initiatorGroup.get(v.id));
  
  PRINT @@initiatorTop;
}

/*

CREATE DISTRIBUTED QUERY bi14_1(datetime startDate, datetime endDate) {
  TYPEDEF TUPLE<INT personId, STRING personFirstName, STRING personLastName, INT threadCount, INT messageCount> initiator;
  SumAccum<INT> @messageCount, @threadCount, @personId;
  MapAccum<INT, INT> @@initiatorGroup;
  HeapAccum<initiator>(100, messageCount DESC, personId ASC) @@initiatorTop;

  vPost = SELECT p FROM Post:p WHERE p.creationDate BETWEEN startDate AND endDate;
  vPerson = 
    SELECT t
    FROM vPost:s-(HAS_CREATOR>)-Person:t
    ACCUM
      t.@threadCount += 1,
      s.@personId = t.id;
  
  vPost =
    SELECT t
    FROM vPost:s-(<REPLY_OF*)-Comment:t
    PER(s,t)
    ACCUM
      t.@personId = s.@personId,
      CASE WHEN t.creationDate BETWEEN startDate AND endDate THEN
          @@initiatorGroup += (t.@personId -> 1)
      END;

  vPerson =
    SELECT v
    FROM vPerson:v
    ACCUM @@initiatorTop += initiator(v.id, v.firstName, v.lastName, v.@threadCount, @@initiatorGroup.get(v.id));
  
  PRINT @@initiatorTop;
}


CREATE DISTRIBUTED QUERY bi14(datetime startDate, datetime endDate) {
  TYPEDEF TUPLE<INT personId, STRING personFirstName, STRING personLastName, INT threadCount, INT messageCount> initiator;
  SumAccum<INT> @messageCount, @threadCount;
  HeapAccum<initiator>(100, messageCount DESC, personId ASC) @@initiatorTop;

  vPost = SELECT p FROM Post:p WHERE p.creationDate BETWEEN startDate AND endDate;
  vPost = SELECT p 
    FROM vPost:p -(<REPLY_OF*)- Comment:m
    WHERE m.creationDate BETWEEN startDate AND endDate
    PER(p,m)
    ACCUM p.@messageCount += 1;

  P =
    SELECT p
    FROM  vPost:t -(HAS_CREATOR>)- Person:p 
    ACCUM 
      p.@threadCount += 1,
      p.@messageCount += t.@messageCount
    ORDER BY p.@messageCount DESC, p.id ASC
    LIMIT 100;
  
  PRINT P[
    P.id AS personId, 
    P.firstName AS personFirstName, 
    P.lastName AS personLastName, 
    P.@threadCount AS threadCount, 
    P.@messageCount AS messageCount];
}*/

