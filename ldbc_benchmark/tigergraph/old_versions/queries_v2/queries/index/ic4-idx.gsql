//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//IC 4 query description is on page 35 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY ic4_index

CREATE DISTRIBUTED QUERY ic4_index(VERTEX<Person> personId, DATETIME startDate, INT durationDays) {
  TYPEDEF TUPLE<STRING tagName, INT postCount> topic;
  SumAccum<int> @postCount;
  SetAccum<VERTEX<Tag>> @@tagsFav, @@tagsExc;
  HeapAccum<topic>(10, postCount DESC, tagName ASC) @@topicTop;

  DATETIME endDate;
  endDate = DATETIME_add(startDate, INTERVAL durationDays DAY);

  S = { personId };
  // find tags of posts created by the Person's friends in the given timeframe
  vTag =
    SELECT t
    FROM S:s -(KNOWS) - Person - (<HAS_CREATOR) - Post:m - (HAS_TAG>) - Tag:t
    //WHERE m.creationDate < endDate
    //idex(Post.creationDate)
    WHERE m.creationDate == endDate 
    PER(m,t)
    ACCUM
      CASE
        WHEN m.creationDate >= startDate THEN
          t.@postCount += 1
        WHEN m.creationDate < startDate THEN
          @@tagsExc += t
      END
    POST-ACCUM CASE WHEN t.@postCount > 0 THEN @@tagsFav += t END;

  @@tagsFav = @@tagsFav MINUS @@tagsExc;
  vTag = { @@tagsFav };

  // perform ordering on vTag
  vTag =
    SELECT t FROM vTag:t
    ACCUM @@topicTop += topic(t.name, t.@postCount);
  PRINT @@topicTop;
}
