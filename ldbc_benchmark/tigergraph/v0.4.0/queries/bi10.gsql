CREATE DISTRIBUTED QUERY bi10(VERTEX<Person> personId, STRING countryName, STRING tagClassName,
  INT minPathDistance, INT maxPathDistance) FOR GRAPH ldbc_snb SYNTAX v2 {

  SumAccum<INT> @@pathLength;

  OrAccum @visited;

  country = SELECT c FROM Country:c WHERE c.name == countryName;
  candidates = SELECT p FROM country -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p;

  sources = {personId};
  targets (Person) = {};
  WHILE @@pathLength < minPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;
  END;
  WHILE @@pathLength < maxPathDistance DO
    sources =
      SELECT t
      FROM sources:s -(KNOWS)- Person:t
      WHERE NOT t.@visited
      POST-ACCUM s.@visited = TRUE;
    @@pathLength += 1;

    targets = targets UNION sources;
  END;

  expertCandidatePersons = targets INTERSECT candidates;
  tagClass = SELECT tc FROM TagClass:tc WHERE tc.name == tagClassName;
  messages =
    SELECT m
    FROM expertCandidatePersons:p -(<HAS_CREATOR)- (Comment|Post):m -(HAS_TAG>.HAS_TYPE>)- tagClass;

  SELECT
    p.id AS expertCandidatePersonId,
    t.name AS tagName,
    COUNT(m) AS messageCount
  INTO result
  FROM
    messages:m -(HAS_TAG>)- Tag:t,
    :m -(HAS_CREATOR>)- expertCandidatePersons:p
  ORDER BY messageCount DESC, tagName ASC, expertCandidatePersonId ASC
  LIMIT 100;

  PRINT result;
}
